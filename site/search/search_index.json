{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing","text":""},{"location":"#overview","title":"Overview \ud83d\udd0d","text":"<p>Python CQRS pattern implementation with Transaction Outbox supporting.</p> <p>This is a package for implementing the CQRS (Command Query Responsibility Segregation) pattern in Python applications. It provides a set of abstractions and utilities to help separate read and write use cases, ensuring better scalability, performance, and maintainability of the application.</p>"},{"location":"#features","title":"Features","text":"<p>This package is a fork of the Diator project with several enhancements:</p> <ol> <li>Support for Pydantic v2.*</li> <li><code>Kafka</code> support using aiokafka</li> <li>Added <code>EventMediator</code> for handling <code>Notification</code> and <code>ECST</code> events coming from the bus</li> <li>Redesigned the event and request mapping mechanism to handlers</li> <li>Added <code>bootstrap</code> for easy setup</li> <li>Added support for Transaction Outbox, ensuring    that <code>Notification</code> and <code>ECST</code> events are sent to the broker</li> <li>FastAPI supporting</li> <li>FastStream supporting</li> </ol>"},{"location":"#installation","title":"Installation","text":""},{"location":"bootstrap/","title":"Bootstrap","text":""},{"location":"di/","title":"DI","text":""},{"location":"event_consuming/","title":"Event Consuming","text":""},{"location":"event_producing/","title":"Event Producing","text":""},{"location":"fastapi/","title":"FastAPI integration","text":""},{"location":"faststream/","title":"Faststream integration","text":""},{"location":"kafka/","title":"Kafka integration","text":""},{"location":"outbox/","title":"Transactional Outbox","text":""},{"location":"examples/bootstrap/","title":"Bootstrap","text":""},{"location":"examples/bootstrap/#bootstrap","title":"Bootstrap","text":"<pre><code>import cqrs\n\ndef command_mapper(mapper: cqrs.RequestMap) -&gt; None: # (2)\n    mapper.bind(JoinMeetingCommand, JoinMeetingCommandHandler)\n\ndef query_mapper(mapper: cqrs.RequestMap) -&gt; None: # (3)\n    mapper.bind(ReadMeetingQuery, ReadMeetingQueryHandler)\n</code></pre>"}]}
